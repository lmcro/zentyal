#!/usr/bin/env bash
RUNNING=/var/lib/zentyal/tmp/.smart-admin-running

touch $RUNNING

function system_check () {
	echo -e "Subject: System report\n"
	echo -e "\n##################"
	echo -e "# GENERAL CHECKS #"
	echo -e "##################"

	## Hostname
	echo -e "\n########"
	echo -e "## Hostname"
	echo -e "########\n"

	hostname -f


	## Hosts file
	echo -e "\n########"
	echo -e "## Hosts"
	echo -e "########\n"

	cat /etc/hosts


	## System's version
	echo -e "\n########"
	echo -e "## Version of Zentyal and Ubuntu"
	echo -e "########\n"

	dpkg -l zentyal-core | tail -1 | awk '{print $2,$3}' | sed 's/-core//' | tr -s "z" "Z"

	lsb_release -sd


	## Zentyal's modules
	echo -e "\n########"
	echo -e "## Zentyal's modules installed"
	echo -e "########\n"

	dpkg -l | egrep "^ii  zentyal-" | awk '{print $1,$2,$3}'


	## Modules enabled
	echo -e "\n########"
	echo -e "## Modules which are enabled"
	echo -e "########\n"

	for zenmod in $(zs notexist status 2> /dev/null | tail -1); do
		zs $zenmod enabled
	done


	## Commercial Edition
	echo -e "\n########"
	echo -e "## Zentyal Commercial Edition"
	echo -e "########\n"

	if [ -f /var/lib/zentyal/.license ]; then
		echo -ne "The license key is: "
		cat /var/lib/zentyal/.license
	else
		echo -e "The server doesn't have a license key."
	fi


	## Uptime
	echo -e "\n########"
	echo -e "## Uptime "
	echo -e "########\n"

	echo -ne "Uptime's server: "
	uptime -p


	# Memory
	echo -e "\n########"
	echo -e "## Memory "
	echo -e "########\n"

	echo -ne "Total memory: "
	free -m | awk '{ print $2 " MB"}' | head -2 | tail -1

	echo -ne "Memory usage: "
  	free -m | awk 'NR==2{printf "%.2f%%\n", $3*100/$2}'

	echo -ne "SWAP usage: "
  	free -m | awk '{ print $3 " MB"}' | tail -1


	## CPU
	echo -e "\n########"
	echo -e "## CPU "
	echo -e "########\n"

	echo -ne "Total cores: "
  	grep 'cpu cores' /proc/cpuinfo | cut -d ':' -f2 | head -1

	echo -ne "CPU load average (1m,5m,15m):"
	top -bn1 | egrep -o "load average:.*" | cut -d ":" -f2 | tr -s "," "."


	## Hard Drive
	echo -e "\n########"
	echo -e "## Hard Drives and partitions"
	echo -e "########\n"

	lsblk

	echo -e "\n## Disk usage: \n"
	df -Th | egrep -v 'tmpfs|udev'


	## Network Interfaces
	echo -e "\n########"
	echo -e "## Network Interfaces"
	echo -e "########\n"

	echo -e "## Interfaces available: \n"
	ip addr show | egrep -i "eth.:" -o | sed 's/://g'
	
	echo -e "\n## IPs configured: \n"
	ip -4 a | egrep "(eth[0-9]:|inet)" | egrep -v '127.' | sed "s/[0-9]://"

	echo -en "\n## Network Interfaces where were 'Down': "
	grep -a 'Link is Down' /var/log/syslog | wc -l

	## Packages
	echo -e "\n########"
	echo -e "## Server packages"
	echo -e "########\n"

	echo -ne "Broken packages: "
	dpkg -l |egrep -v '^ii|rc' | awk '{if(NR>5)print}' | wc -l
	
	sudo apt-get update > /dev/null
	echo -ne "Upgradable packages: "
	apt list --upgradable 2> /dev/null | wc -l

	echo -ne "Last update by Zentyal: "
	grep -ai zentyal-auto-updater /var/log/syslog | awk '{print $1,$2,$3}' | tail -1
	if [[ ${?} -eq 1 ]]; then
		grep -ai zentyal-auto-updater /var/log/syslog.1 | awk '{print $1,$2,$3}' | tail -1
	fi
	echo -e "\n"

	## Repositories
  	echo -e "\n########"
  	echo -e "## Repositories"
  	echo -e "########\n"
  	
	echo -e "## Repositorios configured: "
	egrep -v '^(#|$)' /etc/apt/sources.list

  	echo -e "\n## Custom repositories:\n"
  	find /etc/apt/sources.list.d/ -iname "*.list" -type f -exec ls {} \; -exec egrep -v '^(#|$)' {} \; -exec echo -e "" \;

	## Root emails
	echo -e "\n########"
	echo -e "## Email for root user"
	echo -e "########\n"

	if [ -f /var/mail/root ]; then
		echo -ne "Number of emails: "
		grep "^From" /var/mail/root | wc -l
	else
		echo "There isn't any mail for root user."
	fi


	## Mysql daemon status
	echo -e "\n########"
	echo -e "## Mysql daemon"
	echo -e "########\n"
		
	systemctl is-failed mysql


	## Mysql databases
	echo -e "\n########"
	echo -e "## Mysql databases"
	echo -e "########\n"

	echo -e "\n## Databases available: \n"
	mysql -u root -p$(cat /var/lib/zentyal/conf/zentyal-mysql.passwd) -e "show databases;" 2> /dev/null
		
	echo -e "\n## Mysql databases check: \n"
	mysqlcheck -u root -p$(cat /var/lib/zentyal/conf/zentyal-mysql.passwd) --all-databases 2> /dev/null
}

function dc_check () {
	echo -e "\n############################"
	echo -e "# DOMAIN CONTROLLER CHECKS #"
	echo -e "############################"

	## DNS user
	echo -e "\n########"
	echo -e "## DNS user"	
	echo -e "########\n"

		samba-tool user list 2> /dev/null | egrep '^dns-' 
		echo -e "\n## DNS users on DnsAdmins: \n"
		samba-tool group listmembers DnsAdmins 2> /dev/null | egrep -i "dns-$(hostname)" 


	## DNS user expire
	echo -e "\n########"
	echo -e "## DNS user password flags"
	echo -e "########\n"

		for dnsusers in $(samba-tool user list 2> /dev/null | grep "dns-"); do
			echo -ne "Usuario: ${dnsusers} -> "
			pdbedit -Lv -u ${dnsusers} | grep "^Account Flags" | tr -s " " " " | tr -s "[]" "_" | cut -d "_" -f2
		done


	## DNS user ticket
	echo -e "\n########"
	echo -e "## DNS user ticket"
	echo -e "########\n"

		if pdbedit -Lv -u dns-${HOSTNAME} | grep "^Account Flags" | tr -s " " " " | tr -s "[]" "_" | cut -d "_" -f2 | grep -qo 'X'; then
			echo -e "Getting a Kerberos ticket for 'dns-${HOSTNAME}' ...\n"
			kinit -k -t /var/lib/samba/private/dns.keytab dns-${HOSTNAME}
			if [[ $? -eq 0 ]]; then
				klist
			fi
		else
			echo "Skipping the check for Kerberos ticket for 'dns-${HOSTNAME}' because its password isn't set as 'noexpiry'."
		fi


	## Samba daemons
	echo -e "\n########"
	echo -e "## Status of old Samba daemon"
	echo -e "########\n"

		echo -ne "## Active daemons: \n"
		systemctl is-active winbind smbd sssd
		echo -ne "\n## Enable daemons: \n"
		systemctl is-enabled winbind smbd sssd


	## Samba database check
	echo -e "\n########"
	echo -e "## Samba database check"
	echo -e "########\n"

			samba-tool dbcheck --cross-ncs | tail -1


	## FSMO OWNER
	echo -e "\n########"
	echo -e "## FSMO OWNER"
	echo -e "########\n"

			samba-tool fsmo show 2> /dev/null


	## Number of Domain Controllers
	echo -e "\n########"
	echo -e "## Domain Controllers configured"
	echo -e "########\n"

		ldbsearch -H /var/lib/samba/private/sam.ldb '(invocationId=*)' --cross-ncs objectguid | egrep "(dn|objectGUID):"	


	## DNS aliases for Domain Controllers
	echo -e "\n########"
	echo -e "## DNS alias"
	echo -e "########\n"

		for dc in $(ldbsearch -H /var/lib/samba/private/sam.ldb '(invocationId=*)' --cross-ncs objectguid | egrep "(objectGUID):" | cut -d ":" -f2 | sed "s/ //"); do 
			host -t CNAME $dc._msdcs.$(hostname -d); 
		done


	## DNS Errors on log file
	echo -e "\n########"
	echo -e "## DNS Errors on log file"
	echo -e "########\n"

		egrep -a -A2 -i "root command kinit -k -t" /var/log/zentyal/zentyal.log | tail -10
}

function log_files () {
	declare -r zentyal_log="/var/log/zentyal/zentyal.log"
	declare -A ErrorModules
	declare -A WarningModules

	ErrorModules=([network]=0 [logs]=0 [mysql]=0 [firewall]=0 [ntp]=0 [dhcp]=0 [dns]=0 [samba]=0 [mail]=0 [sogo]=0 [openvpn]=0 [ipsec]=0 [squid]=0 [ejabber]=0)
	WarningModules=([network]=0 [logs]=0 [mysql]=0 [firewall]=0 [ntp]=0 [dhcp]=0 [dns]=0 [samba]=0 [mail]=0 [sogo]=0 [openvpn]=0 [ipsec]=0 [squid]=0 [ejabber]=0)

	while IFS='' read -r line; do
		for i in "${!ErrorModules[@]}"; do
			if [[ ${line,,} =~ ${i} ]] && [[ ${line} =~ "ERROR>" ]]; then
				((ErrorModules[$i]+=1))
		elif [[ ${line,,} =~ ${i} && ( ${line} =~ "WARN>" ) ]]; then
				((WarningModules[$i]+=1))
		fi

	done
	done < "${zentyal_log}"

	echo -e "\n#####################"
	echo -e "# ZENTYAL LOG FILE  #"
	echo -e "#####################"

	echo -e "\n## Errors and Warnings found from '$(head -1 /var/log/zentyal/zentyal.log  | awk '{print $1}')' to '$(tail -1 /var/log/zentyal/zentyal.log  | awk '{print $1}')'"
	echo -e "\n## Errors found:"
		printf "%s\n" "${!ErrorModules[@]}" "${ErrorModules[@]}" | pr -2t
	echo -e "\n## Warnings found:"
		printf "%s\n" "${!WarningModules[@]}" "${WarningModules[@]}" | pr -2t
}

function mail_status() {
	echo -e "\n################"
	echo -e "# Mails status #"
	echo -e "################\n"

	maillog="/var/log/mail.log"
	echo -e "## Status of the emails that were sent and received between the dates: '$(head -1 /var/log/mail.log | awk '{print $1,$2,$3}')' and '$(tail -1 /var/log/mail.log | awk '{print $1,$2,$3}')' :"

	echo "Mail queue: "
	mailq -bp

	echo -n "Mails sent: "
	grep -o 'status=sent' ${maillog} | wc -l

	echo -n "Mails rejected: "
	grep -o 'status=reject' ${maillog} | wc -l

	echo -n "Mails bounced: "
	grep -o 'status=bounced' ${maillog} | wc -l

	echo -n "Mails analized by Mailfilter: "
	grep -o 'Hits: ' ${maillog} | wc -l

	echo -n "Mails with virus: "
	grep -o 'Blocked INFECTED' ${maillog} | wc -l

	echo -n "Mails block by SPAM: "
	grep -o 'Blocked SPAM' ${maillog} | wc -l

	echo -n "Mails block by File Type: "
	grep -o 'Blocked BANNED' ${maillog} | wc -l
}

function log_access() {
	echo -e "\n###################"
	echo -e "# Login accesses #"
	echo -e "###################\n"

	zenlog="/var/log/zentyal/zentyal.log"
	sshlog="/var/log/auth.log"
	sogolog="/var/log/sogo/sogo.log"
	maillog="/var/log/mail.log"

	echo -n "Successful accesses to the Zentyal Admin Interface: "
	grep 'check - Successfully authenticated user' ${zenlog} | wc -l

	echo -n "Failed accesses to the Zentyal Admin Interface: "
	grep '_login - Failed login from:' ${zenlog} | wc -l

	echo -en "\nSuccessful accesses from SSH: "
	egrep "sshd\[.*\]: Accepted password for" ${sshlog} | wc -l

	echo -n "Failed accesses from SSH: "
	egrep "sshd\[.*\]: Failed password for" ${sshlog} | wc -l

	if [[ -f ${sogolog} ]]; then
		echo -en "\nSuccessful accesses  to Sogo Web Interface: "
		egrep "SOGoRootPage successful login" ${sogolog} | wc -l

		echo -n "Failed accesses to Sogo Web Interface: "
		egrep "SOGoRootPage Login from .* might not have worked" ${sogolog} | wc -l
	fi
}

function antivirus_check() {
	echo -e "\n###################"
	echo -e "# Antivirus module #"
	echo -e "###################\n"

	echo -n "Last ClamAV database update: "
	grep 'Database updated' /var/log/clamav/freshclam.log | tail -1 | awk '{print $1,$2,$3,$4,$5}'

	echo -en "\nNumber of Virus detected: "
	egrep -a 'ScanOnAccess:.* FOUND$' /var/log/clamav/clamav.log | wc -l
}


## Checking that the script is runned as root
if [[ $(id -u) -ne 0 ]]; then
	echo "You need to run the script with admin rights, please, run it using 'sudo'."
	exit 2
fi

## Running the main function
system_check

## Running log access function
log_access

## Running log_files function
log_files

## Running antivirus_check
dpkg -l | grep -q 'zentyal-antivirus' 
if [[ ${?} -eq 0 ]] && zs antivirus enabled | grep -qo "ENABLED"; then 
	antivirus_check
fi

## Running the DC funcion
dpkg -l | grep -q 'zentyal-samba' 
if [[ ${?} -eq 0 ]] && zs samba enabled | grep -qo "ENABLED"; then 
	dc_check
fi

## Running mail_status function
dpkg -l | grep -q 'zentyal-mail' 
if [[ ${?} -eq 0 ]] && zs mail enabled | grep -qo "ENABLED"; then 
	mail_status
fi

rm -f $RUNNING