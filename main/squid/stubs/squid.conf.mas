<%doc>
    Main configuration file for Squid daemon

  Parameters:

    snmpEnabled - Boolean indicating if SNMP is enabled or not
</%doc>
<%args>
    $port
    $mode => ''

    $hostfqdn
    $auth
    $principal
    $realm
    $dn           => undef
    $roDn         => undef
    $roPasswd     => undef

    $memory
    $cacheDirSize
    $max_object_size

    @nameservers
    $append_domain

    @rules
    %filterProfiles

    $cache_host
    $cache_port
    $cache_user
    $cache_passwd

    $urlRewriteProgram => undef
    @objectsDelayPools
    @notCachedDomains

    $snmpEnabled => 0
</%args>
<%shared>
our $objectPrefix = 'obj~';
our $groupPrefix = 'grp~';
our $adPrefix = 'ad~';
our $timeDaysPrefix = 'timeDays~';
our $timeHoursPrefix = 'timeHours~';
our $maxAclNameLength = 31;
our %longAclNames = ();
</%shared>
<%perl>
sub _timeAclsInPolicy
{
   my ($policy) = @_;
   my $acls = '';
   if ($policy->{timeDays}) {
      $acls = _aclForDays($policy->{timeDays});
      $acls .= ' ';
   }
   if ($policy->{timeHours}) {
       $acls .= _aclForHours($policy->{timeHours});
   }

   return $acls;
}

sub _aclForHours
{
    my ($hours) = @_;
    return _aclName($timeHoursPrefix . $hours);
}

sub _aclForDays
{
    my ($days) = @_;
    return _aclName($timeDaysPrefix . $days);
}

# needed because space scape doesnt work in acl names
sub _escapeWS
{
    my ($string) = @_;
    $string =~ s{\s}{~~}g;
    return $string;
}
# needed to avoid log acl problems
sub _aclName
{
    my ($name) = @_;
    if (length($name) <= $maxAclNameLength) {
        return _escapeWS($name);
    }

    if (not exists $longAclNames{$name}) {
        my $nextId = 1 + keys %longAclNames;
        $nextId = 'longAcl~' . $nextId;
        $longAclNames{$name} = $nextId;
    }

    return _escapeWS($longAclNames{$name});
}

sub _printSplitAcl
{
   my ($acl, $members_r, $membersPerLine) = @_;
   $membersPerLine or $membersPerLine = 10;
   my @members = @{ $members_r };
   while (@members > 0) {
        my @membersInAcl = splice(@members, 0, $membersPerLine);
        $m->print("$acl @membersInAcl\n")
   }
}

sub _rulesACLs
{
  my %args = @_;
  my @rules = @{ $args{rules} };
  my $realm = $args{realm};
  my %seenACL;

  foreach my $rule (@rules) {
    my $object = $rule->{object};
    my $group = $rule->{group};
    my $adDN = $rule->{adDN};
    my ($aclName, $groupName);
    if ($rule->{any}) {
        # for any object rule, there is not specific acl
    } elsif ($object) {
        $aclName = $objectPrefix . $object;
    } elsif ($group) {
        ($groupName) = $group =~ m/^CN=(.*?),/;
        $groupName =~ s{ }{\\ }g;  # escape group name
        $aclName = $groupPrefix . $groupName;
    } elsif ($adDN) {
        $aclName = $adPrefix . $adDN;
    } else  {
        next;
    }

    if ($aclName) {
        $aclName = _aclName($aclName);
        if ($seenACL{$aclName}) {
            # dont print again the ACL, but we cotinue to be able to get time ACLs
            # which will be different bztime  overlapping ACLs are not allowed
        } elsif ($object) {
            my $acl = "acl $aclName src";
            _printSplitAcl($acl, $rule->{addresses});
        } elsif ($group) {
            $m->print("acl $aclName external ldapgroup $groupName\n");
        }  else {
            next;
        }
        $seenACL{$aclName} = 1;
    }

    if ($rule->{timeDays}) {
       my $aclName = _aclForDays($rule->{timeDays});
       if (not $seenACL{$aclName}) {
           $m->print("acl $aclName time " . $rule->{timeDays} . "\n");
           $seenACL{$aclName}= 1;
       }
    }
    if ($rule->{timeHours}) {
        my $aclName = _aclForHours($rule->{timeHours});
       if (not $seenACL{$aclName}) {
           $m->print("acl $aclName time " . $rule->{timeHours} . "\n");
           $seenACL{$aclName} = 1;
       }
    }
  }
}
</%perl>


<%def .rulesAccess>
<%args>
@rules
%profilesRulesStubs
</%args>
% foreach my $rule (@rules) {
<%perl>
   my $aclName;
   my $object = $rule->{'object'};
   if ($rule->{any}) {
       $aclName = 'all';
   } elsif ($object) {
       $aclName = $objectPrefix . $object;
   }

   my $group = $rule->{'group'};
   if ($group) {
      my ($groupName) = $group =~ m/^CN=(.*?),/;
       $groupName =~ s{ }{\\ }g;  # escape group name
       $aclName = $groupPrefix . $groupName;
   }

   my $acl = _aclName($aclName);

   my $timeAcls = _timeAclsInPolicy($rule);
   my $policy = $rule->{'policy'};
   if ($policy eq 'profile') {
      my $rulesStubs = $profilesRulesStubs{$rule->{profile}};
      if (not $rulesStubs) {
       # need to allow, to be able to pass it to DG
        $policy = 'allow';
    }  else {
        # expand rules stubs
        my $baseAcls;
        if ($group) {
            $baseAcls = "$timeAcls authorized $acl ";
        } else {
            $baseAcls = "$timeAcls $acl ";
        }
        foreach my $stub (@{$rulesStubs  }) {
            my $ruleStr = $stub->{type};
            $ruleStr .= ' ' . $stub->{policy};
            $ruleStr .= ' ' . $baseAcls . _aclName($stub->{acl});
            $ruleStr .= "\n";
            # output the rule
            $m->print($ruleStr);
        }
        # dont produce normal rules in this case
        next;
    }
   }

   if ($group) {
      $acl = "authorized $acl";
   }
</%perl>
http_access <% $policy %> <% $timeAcls %> <% $acl %>
% }
</%def>

<%def .rulesACLs>
<%args>
    @rules
    $realm
</%args>
% foreach my $rule (@rules) {
%   if ($rule->{any}) {
       <& .timeACLs, rule => $rule, id => 'any_src_' . $rule->{number} &>
%      next;
%   }
%   my $object = $rule->{object};
%   my $group = $rule->{group};
%   my $src = $object ? $object : $group;
%   my $aclName = _aclName($src);
%   if ($object) {
acl <% $aclName %> src <% join ' ', @{ $rule->{addresses} } %>
%   } else {
%       # escape user names
%       my @users = map { $_ =~ s{ }{\\ }g; $_ } @{$rule->{users}};
%       if ($realm) {
%           @users = map { $_ . '@' . $realm } @users;
%       }
acl <% $aclName %> proxy_auth <% join (' ', @users) %>
%   }
   <& .timeACLs, rule => $rule, id => $src &>
% }
</%def>

<%def .timeACLs>
<%args>
    $rule
    $id
</%args>
% if ($rule->{timeDays}) {
acl <% _aclName('timeDays_' . $id) %> time <% $rule->{timeDays} %>
% }
% if ($rule->{timeHours}) {
acl <% _aclName('timeHours_' . $id) %> time <% $rule->{timeHours} %>
% }
</%def>

<%def .delayPools>
<%args>
@objectsDelayPools
</%args>
% if ( @objectsDelayPools ) {
%     my $pools = @objectsDelayPools;
delay_pool_uses_indirect_client on
delay_pools <% $pools %>
% }
<%perl>
 my $id = 0;
 foreach my $objPool (@objectsDelayPools) {
     $id++;
     my $rate =  $objPool->{rate};
     if ($rate > 0) {
         $rate *= 1024;
     }
     my $size = $objPool->{size};
     if ($size > 0) {
         $size *= 1024 * 1024;
     }
</%perl>
delay_class <% $id %> <% $objPool->{class} %>
%     if ( $objPool->{class} eq '1' ) {
delay_parameters <% $id %> <% $rate %>/<% $size %>
%     } elsif ( $objPool->{class} eq '2' ) {
<%perl>
     my $clt_rate =  $objPool->{clt_rate};
     if ($clt_rate > 0) {
         $clt_rate *= 1024;
     }
     my $clt_size = $objPool->{clt_size};
     if ($clt_size > 0) {
         $clt_size *= 1024 * 1024;
     }
</%perl>
delay_parameters <% $id %> <% $rate %>/<% $size %> <% $clt_rate %>/<% $clt_size %>
%     }
delay_initial_bucket_level 90
delay_access <% $id %> allow <% $objPool->{object} %>
delay_access <% $id %> deny all
% }
</%def>

<%def .snmp>
<%doc>
Define the SNMP configuration as SNMP agent
</%doc>
acl snmppublic snmp_community public
snmp_port 3401
snmp_access allow snmppublic from_localhost
snmp_access deny all
</%def>

http_port 0.0.0.0:<% $port %> <% $mode %>

visible_hostname <% $hostfqdn %>
coredump_dir /var/spool/squid
cache_effective_user proxy
cache_effective_group proxy
cache_mem <% $memory %> MB
cache_dir ufs /var/spool/squid <% $cacheDirSize %> 16 256
maximum_object_size <% $max_object_size %> MB
access_log /var/log/squid/access.log squid
cache_log /var/log/squid/cache.log
cache_store_log /var/log/squid/store.log

pid_filename /var/run/squid.pid

% if (@nameservers) {
%   my $dns_nameservers = '';
%   foreach my $srv (@nameservers) {
%     $dns_nameservers .= "$srv ";
%   }
dns_nameservers <% $dns_nameservers %>
% }
% if ($append_domain) {
append_domain .<% $append_domain %>
% }

# refresh patterns

# windows updates
refresh_pattern http://.*\.windowsupdate\.microsoft\.com/ 0 80% 20160 reload-into-ims
refresh_pattern http://.*\.update\.microsoft\.com/ 0 80% 20160 reload-into-ims
refresh_pattern http://download\.microsoft\.com/ 0 80% 20160 reload-into-ims
refresh_pattern http://windowsupdate\.microsoft\.com/ 0 80% 20160 reload-into-ims
refresh_pattern http://.*\.download\.windowsupdate\.com/ 0 80% 20160 reload-into-ims
refresh_pattern http://office\.microsoft\.com/ 0 80% 20160 reload-into-ims
refresh_pattern http://w?xpsp[0-9]\.microsoft\.com/ 0 80% 20160 reload-into-ims
refresh_pattern http://w2ksp[0-9]\.microsoft\.com/ 0 80% 20160 reload-into-ims

# linux updates
refresh_pattern http://.*\.archive\.ubuntu\.com/ 0 80% 20160 reload-into-ims
refresh_pattern http://(ftp|http)[0-9]*\.[a-z]+\.debian\.org/ 0 80% 20160 reload-into-ims

refresh_pattern ^ftp:           1440    20%     10080
refresh_pattern ^gopher:        1440    0%      1440
refresh_pattern -i (/cgi-bin/|\?) 0     0%      0
refresh_pattern .               0       20%     4320

# end refresh patterns

% if ($cache_host and $cache_port) {
%   my $peerAuth = '';
%   if ($cache_user and $cache_passwd) {
# WARN: remember that for squid auth % are HTML escapes
%    $peerAuth = 'login=' . $cache_user . ':' . $cache_passwd;
%   }
cache_peer <% $cache_host %> parent <% $cache_port %> 0 no-query no-digest <% $peerAuth %>
% }

% if ($auth) {
%   if ($realm) {
auth_param negotiate program /usr/lib/squid/negotiate_kerberos_auth -i -s <% $principal %>@<% $realm %>
auth_param negotiate children 10
auth_param negotiate keep_alive on
external_acl_type ldapgroup  ipv4 %LOGIN /usr/lib/squid/ext_ldap_group_acl -v3 -b <% $dn %> -p 3268 -D <% $roDn %> -w <% $roPasswd %> -P -F "(&(userPrincipalName=%s)(objectclass=user))" -f "(&(samAccountName=%g)(objectclass=group)(member=%u))"
%   } else {
auth_param basic realm Zentyal HTTP proxy
auth_param basic program /usr/lib/squid/basic_ldap_auth -v3 -b <% $dn %> -f "(&(samAccountName=%s)(objectclass=user))" -p 3268 -D <% $roDn %> -w <% $roPasswd %> -P
external_acl_type ldapgroup  ipv4 %LOGIN /usr/lib/squid/ext_ldap_group_acl -v3 -b <% $dn %> -p 3268 -D <% $roDn %> -w <% $roPasswd %> -P -F "(&(samAccountName=%s)(objectclass=user))" -f "(&(samAccountName=%g)(objectclass=group)(member=%u))"
%   }
acl authorized proxy_auth REQUIRED
% }

% if ($urlRewriteProgram) {
url_rewrite_program <% $urlRewriteProgram %>
% }

<& .rulesACLs, rules => [ @objectsDelayPools ], realm => $realm &>
acl_uses_indirect_client on

# no cache domains acl
% foreach my $domain (@notCachedDomains) {
acl noCached dstdomain <% $domain %>
% }

% if (@notCachedDomains) {
cache deny noCached
% }


acl from_localhost src 127.0.0.0/8 ::1
acl manager url_regex -i ^cache_object:// +i ^https?://[^/]+/squid-internal-mgr/
acl SSL_ports port 443          # https, snews
acl SSL_ports port 873          # rsync
acl SSL_ports port 21       #ftp
acl SSL_ports port 631      #cups over https
acl Safe_ports port 80          # http
acl Safe_ports port 21          # ftp
acl Safe_ports port 443 563     # https, snews
acl Safe_ports port 70          # gopher
acl Safe_ports port 210         # wais
acl Safe_ports port 1025-65535  # unregistered ports
acl Safe_ports port 280         # http-mgmt
acl Safe_ports port 488         # gss-http
acl Safe_ports port 591         # filemaker
acl Safe_ports port 631         # cups
acl Safe_ports port 777         # multiling http
acl Safe_ports port 873         # rsync
acl Safe_ports port 901         # SWAT

acl CONNECT method CONNECT
acl purge method PURGE

% foreach my $acl (@{ $filterProfiles{acls} }) {
%   my ($declaration, $name, $params) = split '\s+', $acl, 3;
%   $name = _aclName($name);
acl <% "$name $params" %>
% }

http_access allow to_localhost
follow_x_forwarded_for allow from_localhost
log_uses_indirect_client on

http_access allow manager to_localhost

http_access deny manager
http_access deny purge
http_access deny !Safe_ports

http_access deny CONNECT !SSL_ports
http_access allow from_localhost
forwarded_for on
always_direct allow to_localhost

% if ($cache_host and $cache_port) {
never_direct allow all
% }

<& .delayPools, objectsDelayPools => \@objectsDelayPools &>

% if ($snmpEnabled) {
<& .snmp &>
% }

##
## ACLs from model rules
##
% _rulesACLs(rules => \@rules, realm => $realm );
##
## Access
##
<& .rulesAccess, rules => \@rules,
                 profilesRulesStubs => $filterProfiles{rulesStubs}
&>

##
## Default policy
##
# All acces denied by default if no other allow rule matchs
http_access deny all
# reply access allowed if not denied before
http_reply_access allow all
